{"version":3,"sources":["components/Form.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","submit","type","value","placeholder","onChange","change","Result","weather","error","city","temp","date","sunRise","sunSet","wind","pressure","content","sunRiseTime","Date","toLocaleTimeString","sunSetTime","className","APIkey","App","state","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","time","toLocaleString","sys","sunrise","sunset","main","speed","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uPAeeA,G,MAbF,SAACC,GACV,OACA,0BAAMC,SAAUD,EAAME,QAClB,2BACAC,KAAK,OACLC,MAAOJ,EAAMI,MACbC,YAAY,6BACZC,SAAUN,EAAMO,SAEhB,+CCgBOC,EAzBA,SAACR,GAAW,IAAD,EAC6CA,EAAMS,QAAlEC,EADe,EACfA,MAAOC,EADQ,EACRA,KAAMC,EADE,EACFA,KAAMC,EADJ,EACIA,KAAKC,EADT,EACSA,QAASC,EADlB,EACkBA,OAAQC,EAD1B,EAC0BA,KAAMC,EADhC,EACgCA,SAElDC,EAAU,KACRC,EAAc,IAAIC,KAAe,IAAVN,GAAgBO,qBACvCC,EAAa,IAAIF,KAAc,IAATL,GAAeM,qBAc3C,OAbIX,GAASC,IACTO,EACI,6BACI,uDAA4B,4BAAKP,IACjC,wDAA8BE,EAA9B,KACA,qDAA2BD,EAA3B,WACA,4DAAqBO,EAArB,KACA,4DAAqBG,EAArB,KACA,kEAAyBN,EAAzB,SACA,wDAAyBC,EAAzB,UAKR,yBAAKM,UAAU,UACVb,EAAK,4BAAwBC,EAAxB,KAAkCO,IClB9CM,EAAS,mCACMC,E,2MACrBC,MAAQ,CACNtB,MAAO,GACPS,KAAM,GACNF,KAAM,GACNG,QAAS,GACTC,OAAQ,GACRH,KAAK,GACLK,SAAS,GACTD,KAAK,GACLN,OAAO,G,EAETiB,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACdzB,MAAOwB,EAAEE,OAAO1B,S,EAGlB2B,iBAAmB,SAACH,GAClBA,EAAEI,iBACF,IAAMC,EAAG,4DAAwD,EAAKP,MAAMtB,MAAnE,kBAAkFoB,EAAlF,iBACTU,MAAMD,GACHE,KAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,6BAEbH,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAC,GACJ,IAAMI,GAAO,IAAIpB,MAAOqB,iBACxB,EAAKZ,SAAS,CACZnB,OAAO,EACPG,KAAM2B,EACN7B,KAAM,EAAKe,MAAMtB,MACjBU,QAASsB,EAASM,IAAIC,QACtB5B,OAAQqB,EAASM,IAAIE,OACrBhC,KAAMwB,EAASS,KAAKjC,KACpBK,SAAUmB,EAASS,KAAK5B,SACxBD,KAAMoB,EAASpB,KAAK8B,UAGvBC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZ,EAAKnB,SAAS,CACZnB,OAAO,EACPC,KAAM,EAAKe,MAAMtB,W,wEAOrB,OACE,6BACE,kBAAC,EAAD,CAAMA,MAAO+C,KAAKzB,MAAMtB,MAAOG,OAAQ4C,KAAKxB,kBAAmBzB,OAAQiD,KAAKpB,mBAC5E,kBAAC,EAAD,CAAQtB,QAAS0C,KAAKzB,a,GAvDG0B,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC,gB","file":"static/js/main.b1d3599c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = (props) => {\r\n    return(\r\n    <form onSubmit={props.submit}>\r\n        <input\r\n        type='text'\r\n        value={props.value}\r\n        placeholder=\"Wpisz nazwę miasta...\"\r\n        onChange={props.change}\r\n        />\r\n        <button>Wyszukaj</button>\r\n    </form>\r\n    );\r\n}\r\nexport default Form;","import React from 'react'\r\n\r\nconst Result = (props) => {\r\n    const {error, city, temp, date,sunRise, sunSet, wind, pressure } = props.weather;\r\n\r\n    let content = null;\r\n    const sunRiseTime = new Date(sunRise * 1000).toLocaleTimeString();\r\n    const sunSetTime = new Date(sunSet * 1000).toLocaleTimeString();\r\n    if(!error && city) {\r\n        content = (\r\n            <div>\r\n                <h3>Wyniki wyszukiwania dla <em>{city}</em></h3>\r\n                <h4>Dane dla dnia i godziny: {date} </h4>\r\n                <h4>Aktualna temperatura: {temp} °C </h4>\r\n                <h4>Wschód słońca o {sunRiseTime} </h4>\r\n                <h4>Zachód słońca o {sunSetTime} </h4>\r\n                <h4>Prędkość wiatru to: {wind} m/s </h4>\r\n                <h4>Aktualne ciśnienie: {pressure} hPa</h4>\r\n            </div>\r\n        )\r\n    }\r\n    return(\r\n        <div className='result'>\r\n            {error ? `Nie mamy w bazie \"${city}\"` : content}\r\n        </div>\r\n    );\r\n}\r\nexport default Result;","import React, { Component } from 'react';\nimport  './App.css';\nimport Form from './components/Form';\nimport Result from './components/Result';\n\nconst APIkey = '037727d5a2dbe9f86d6c32b74812a218';\nexport default class App extends Component {\nstate = {\n  value: '',\n  date: '',\n  city: '',\n  sunRise: '',\n  sunSet: '',\n  temp:'',\n  pressure:'',\n  wind:'',\n  error: false\n}\nhandleInputChange = (e) => {\n  this.setState({\n  value: e.target.value\n  })\n}\nhandleCitySubmit = (e) => {\n  e.preventDefault();\n  const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIkey}&units=metric`;\n  fetch(API)\n    .then(response => {\n      if (response.ok) {\n        return response\n      }\n      throw Error(\"Nie udało się\")\n    })\n    .then(response => response.json())\n    .then(response => {\n      const time = new Date().toLocaleString()\n      this.setState({\n        error: false,\n        date: time,\n        city: this.state.value,\n        sunRise: response.sys.sunrise,\n        sunSet: response.sys.sunset,\n        temp: response.main.temp,\n        pressure: response.main.pressure,\n        wind: response.wind.speed\n      })\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({\n        error: true,\n        city: this.state.value\n      })\n    }\n    )\n}\n\n  render() {\n    return (\n      <div>\n        <Form value={this.state.value} change={this.handleInputChange} submit={this.handleCitySubmit} />\n        <Result weather={this.state} />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}